api:
  common:
    version: 1.0.0
    title: 달나라까지
    description: 내생애달나라까지
    termsOfServiceUrl: (termsOfServiceUrl)MINE TERMS OF SERVICE URL
    license: License(책정리중)
    licenseUrl: (licenseUrl) MY LICENSE URL

    contact:
      name: 이름
      url: http://msa200.com
      email: myinno@mail.com

  product-composite:
    get-composite-product:
      description: 상품정보Return
      notes: |
        # 정상응답
        상품정보를 리턴한다:
        1. 기본 상품 정보
        1. 리뷰정보
        1. 추천정보
        1. 기동한 서버 정보 Address

        # 주요 오류(설계서에 오류 코드를 정의하면 어떻까?)
        여기서는 Http 오류 코드 설명(나중에 메시지 코드에 대하여 설명하면 어떻까?)

        ## Product id 113
        200 - Ok, but no recommendations will be returned

        ## Product id 213
        200 - Ok, but no reviews will be returned

        ## 상품ID문자입력
        400 - <b>입력Format오류</b> 

        ## Product id 13
        404 - <b>해당자료없음</b>

        ## 상품정보 음수 입력
        422 - <b>상품정보 입력 오류</b> 
    create-composite-product:
      description: Creates a composite product
      notes: |
        # 정상응답
        The composite product information posted to the API will be splitted up and stored as separate product-info, recommendation and review entities.

        # Expected error responses
        1. If a product with the same productId as specified in the posted information already exists,
           an <b>422 - Unprocessable Entity</b> error with a "duplicate key" error message will be returned

    delete-composite-product:
      description: Deletes a product composite
      notes: |
        # Normal response
        Entities for product information, recommendations and reviews related to the specificed productId will be deleted.
        The implementation of the delete method is idempotent, i.e. it can be called several times with the same response.
        This means that a delete request of a non existing product will return <b>200 Ok</b>.

# swagger 관련
mvc:
   pathmatch:
     matching-strategy: ant_path_matcher

server.port: 7000

app:
  product-service:
    host: localhost
    port: 7001
  recommendation-service:
    host: localhost
    port: 7002
  review-service:
    host: localhost
    port: 7003

logging:
  level:
    root: INFO
    se.magnus: DEBUG
  # Output to a file named application.log. 
#  file:
#    name: application.log
#    path: c:\APP  # Output to a file named spring.log in path /Users
  pattern:
    file: '%d{dd HH:mm:ss} [%thread] %-5level %logger{10}:%L - %msg%'  ## Logging pattern for file

---
spring.profiles: docker

server.port: 8081

app:
  product-service:
    host: product
    port: 8081
  recommendation-service:
    host: recommendation
    port: 8081
  review-service:
    host: review
    port: 8081